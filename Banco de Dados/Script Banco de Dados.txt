-- Criação da tabela "usuario"
CREATE TABLE usuario (
  cpf varchar(14) PRIMARY KEY,
  email varchar(60) NOT NULL UNIQUE,
  senha varchar(60) NOT NULL,
  data_registro timestamp,
  role_usuario varchar(20) CHECK (role_usuario IN ('cliente', 'gestor', 'barbeiro'))  NOT NULL
);

-- Criação da tabela "cliente"
CREATE TABLE cliente (
  cpf varchar(14) REFERENCES usuario (cpf) UNIQUE,
  nome varchar(30) NOT NULL,
  telefone varchar(15),
  qtd_agendamento integer,
  qtd_promocao integer
);

-- Criação da tabela "barbeiro"
CREATE TABLE barbeiro (
  cpf varchar(14) REFERENCES usuario(cpf) UNIQUE,
  nome varchar(30) NOT NULL,
  telefone varchar(15),
  media_nota numeric(2,1)
);

-- Criação da tabela "comentario"
CREATE TABLE comentario (
  id SERIAL PRIMARY KEY,
  cpf_barbeiro varchar(14) REFERENCES barbeiro(cpf),
  descricao varchar(255),
  nota numeric(2,1)
);


-- Criação da tabela "agendamento"
CREATE TABLE agendamento (
  cpf_barbeiro varchar(14),
  data_horario timestamp,
  cpf_cliente varchar(14) NOT NULL,
  descricao_corte varchar(255),
  valorTotal double precision NOT NULL,
  status varchar(20) CHECK (status IN ('andamento', 'concluido', 'cancelado')),
  PRIMARY KEY (cpf_barbeiro, data_horario),
  FOREIGN KEY (cpf_barbeiro) REFERENCES barbeiro(cpf) ON DELETE CASCADE,
  FOREIGN KEY (cpf_cliente) REFERENCES cliente(cpf) ON DELETE CASCADE
);

-- Criação da trigger "tr_atualiza_qtd_agendamento"
CREATE OR REPLACE FUNCTION atualiza_qtd_agendamento()
  RETURNS TRIGGER AS
$$
DECLARE
  qtde_agendamentos INTEGER;
  qtde_promocao INTEGER;
BEGIN
 IF (NEW.cpf_cliente IS NOT NULL) THEN -- Verifica se o agendamento está associado a um cliente
    SELECT qtd_agendamento INTO qtde_agendamentos
    FROM cliente
    WHERE cpf = NEW.cpf_cliente;
	
	SELECT qtd_promocao INTO qtde_promocao
	FROM cliente
	WHERE cpf = NEW.cpf_cliente;
	
	IF (qtde_promocao > 0) THEN
	UPDATE cliente
      SET qtd_promocao = qtd_promocao - 1
      WHERE cpf = NEW.cpf_cliente;
	  NEW.valorTotal:=0.00;
    ELSIF  (qtde_agendamentos + 1 = 10) THEN
      UPDATE cliente
      SET qtd_promocao = qtd_promocao + 1,
          qtd_agendamento = 0
      WHERE cpf = NEW.cpf_cliente;
    ELSE
      UPDATE cliente
      SET qtd_agendamento = qtde_agendamentos + 1
      WHERE cpf = NEW.cpf_cliente;
    END IF;
ELSE
	RAISE EXCEPTION 'CPF NÃO PODE SER NULL'; 
END IF;

  RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER tr_atualiza_qtd_agendamento
BEFORE INSERT ON agendamento
FOR EACH ROW
EXECUTE FUNCTION atualiza_qtd_agendamento();

CREATE OR REPLACE FUNCTION verificar_horario_agendamento()
  RETURNS TRIGGER AS
$$
DECLARE
  contador integer;
BEGIN
  -- Verifica se existe algum agendamento do barbeiro dentro do intervalo de 40 minutos em relação ao novo agendamento
  SELECT COUNT(*) INTO contador
  FROM agendamento
  WHERE cpf_barbeiro = NEW.cpf_barbeiro
    AND data_horario > NEW.data_horario - INTERVAL '40 minutes'
    AND data_horario < NEW.data_horario + INTERVAL '40 minutes'
    AND status = 'andamento';

  -- Se houver algum agendamento em andamento no intervalo, lança uma exceção
  IF contador > 0 THEN
    RAISE EXCEPTION 'O horário do agendamento deve ter pelo menos 40 minutos de diferença em relação a outros agendamentos em andamento do barbeiro.';
  END IF;

  RETURN NEW;
END;
$$
LANGUAGE plpgsql;

-- Criação da trigger associada à tabela "agendamento"
CREATE TRIGGER tr_verificar_horario_agendamento
BEFORE INSERT ON agendamento
FOR EACH ROW
EXECUTE FUNCTION verificar_horario_agendamento();

CREATE OR REPLACE FUNCTION cancelar_agendamento(cpf_cliente_cancelamento varchar(14), data_cancelamento TIMESTAMP)
RETURNS VOID AS
$$
DECLARE
  qtd_agendamentos INT;
  qtd_promocaos INT;
BEGIN
  UPDATE agendamento
  SET status = 'cancelado'
  WHERE cpf_cliente = cpf_cliente_cancelamento AND data_horario = data_cancelamento;
  
  -- Verifica a tabela cliente
  SELECT cliente.qtd_agendamento, cliente.qtd_promocao INTO qtd_agendamentos, qtd_promocaos
  FROM cliente
  WHERE cpf = cpf_cliente_cancelamento;
  
  -- Verifica a condição quantidade_agendamentos = 0 e promocao = 1
  IF qtd_agendamentos = 0 AND qtd_promocaos = 1 THEN
    UPDATE cliente
    SET qtd_agendamento = 9, qtd_promocao = 0
    WHERE cpf  = cpf_cliente_cancelamento;
    
  -- Verifica a condição quantidade_promocao = 0 e quantidade_agendamentos = 0
  ELSIF qtd_promocaos = 0 AND qtd_agendamentos = 0 THEN
    UPDATE cliente
    SET qtd_promocao = 1
    WHERE cpf = cpf_cliente_cancelamento;
    
  -- Outros casos, retira 1 da quantidade_agendamentos
  ELSE
    UPDATE cliente
    SET qtd_agendamento = qtd_agendamentos - 1
    WHERE cpf  = cpf_cliente_cancelamento;
  END IF;
END;
$$
LANGUAGE plpgsql;

--trigger para calcular a média quando o comentario é inserido


CREATE OR REPLACE FUNCTION calcular_media_nota()
  RETURNS TRIGGER AS
$$
DECLARE
  soma_notas numeric;
  total_comentarios integer;
  nota_media numeric;
BEGIN
  -- Calcula a soma das notas dos comentários para o barbeiro atual
  SELECT SUM(nota) INTO soma_notas
  FROM comentario
  WHERE cpf_barbeiro = NEW.cpf_barbeiro;
  
  -- Conta a quantidade total de comentários para o barbeiro atual
  SELECT COUNT(*) INTO total_comentarios
  FROM comentario
  WHERE cpf_barbeiro = NEW.cpf_barbeiro;
  
  -- Calcula a média das notas
  nota_media := soma_notas / total_comentarios;

  -- Atualiza a nota média na tabela de barbeiros
  UPDATE barbeiro
  SET media_nota = nota_media
  WHERE cpf = NEW.cpf_barbeiro;
  
  RETURN NEW;
END;
$$
LANGUAGE plpgsql;

-- Criação da trigger associada à tabela "comentario"
CREATE TRIGGER tr_calcular_media_nota
AFTER INSERT ON comentario
FOR EACH ROW
EXECUTE FUNCTION calcular_media_nota();



-- Inserções na tabela "usuario"
INSERT INTO usuario (cpf, email, senha, data_registro, role_usuario) VALUES
('111.111.111-11', 'usuario1@example.com', 'senha123', NOW(), 'cliente'),
('222.222.222-22', 'usuario2@example.com', 'senha456', NOW(), 'cliente'),
('333.333.333-33', 'usuario3@example.com', 'senha789', NOW(), 'barbeiro'),
('444.444.444-44', 'usuario4@example.com', 'senhaabc', NOW(), 'barbeiro'),
('555.555.555-55', 'usuario5@example.com', 'senhaxyz', NOW(), 'gestor');

INSERT INTO cliente (cpf, nome, telefone, qtd_agendamento, qtd_promocao) VALUES
('111.111.111-11', 'Cliente 1', '1111111111', 3, 2),
('222.222.222-22', 'Cliente 2', '2222222222', 1, 0);

-- Inserções na tabela "barbeiro"
INSERT INTO barbeiro (cpf, nome, telefone, media_nota) VALUES
('333.333.333-33', 'Barbeiro 1', '6666666666', 4.5),
('444.444.444-44', 'Barbeiro 2', '7777777777', 3.8);


-- Inserções na tabela "comentario"
INSERT INTO comentario (cpf_barbeiro, descricao, nota) VALUES
('333.333.333-33', 'Ótimo atendimento!', 4.5),
('333.333.333-33', 'Corte de cabelo perfeito!', 5.0),
('444.444.444-44', 'Poderia ser melhor.', 3.0);

-- Inserções na tabela "agendamento"
INSERT INTO agendamento (cpf_barbeiro, data_horario, cpf_cliente, descricao_corte, valorTotal, status) VALUES
('333.333.333-33', '2023-06-26 20:40:00', '111.111.111-11', 'Corte de cabelo masculino', 50.0, 'andamento');
('333.333.333-33', '2023-06-26 15:30:00', '222.222.222-22', 'Corte de barba', 30.0, 'andamento');

UPDATE CLIENTE
SET qtd_promocao = 2
where cpf = '111.111.111-11'

select * from agendamento

select * from CLIENTE


SELECT cancelar_agendamento('222.222.222-22', '2023-06-26 15:30:00' );







